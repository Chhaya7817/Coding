import java.util.HashMap;
public class MAlware_Spread_LT {

    public int minMalwareSpread(int[][] graph, int[] initial) {
        DSU ds=new DSU();
        for (int i = 0; i < graph.length; i++) {
            ds.createSet(i);
        }
        for (int i = 0; i < graph.length; i++) {
            for (int j = i+1; j < graph.length; j++) {
                if(graph[i][j]==1)
                    ds.union(i, j);
            }
        }
        int[] infected=new int[graph.length];
        for(int node:initial)
        {
            infected[ds.find(node)]++;
        }
        int res=-1;
        int ressize=-1;
        for (int i = 0; i < initial.length; i++) {
            int node=ds.find(initial[i]);
            if(infected[node]==1)
            {
                int cursize=ds.size(node);
                if(cursize>ressize)
                {
                    res=initial[i];
                    ressize=cursize;
                }
                else if(cursize==ressize)
                {
                    res=Math.min(res,initial[i]);
                    ressize=cursize;
                }
            }
        }
        if(res==-1)  //More than one infected node in all
        {
            res=Integer.MAX_VALUE;
            for (int i = 0; i < initial.length; i++) {
                res=Math.min(res,initial[i]);
            }
        }
        return res;
    }

    public class DSU{
        public class Node{
            int val;
            Node parent;
            int size;

        }
        HashMap<Integer,Node> map=new HashMap<>();
        public void createSet(int v)
        {
            Node nn=new Node();
            nn.val=v;
            nn.parent=nn;
            nn.size=1;
            map.put(v,nn);
        }
        public int find(int v)
        {
            Node nn=map.get(v);
            return find(nn).val;

        }
        private Node find(Node nn) {
            if(nn.parent==nn) return nn;
            return find(nn.parent);
        }
        public void union(int v1,int v2)
        {
            Node n1=map.get(v1);
            Node n2=map.get(v2);
            Node rp1=find(n1);
            Node rp2=find(n2);
            rp1.parent=rp2;
            rp2.size=rp1.size+rp2.size;


        }
        public int size(int v)
        {
            Node nn=map.get(v);
            return find(nn).size;
        }
    }
}
